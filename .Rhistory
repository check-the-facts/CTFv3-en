data4$CROHO.ONDERDEEL <- as.character(data4$CROHO.ONDERDEEL)
data4$GEMEENTENAAM <- as.character(data4$GEMEENTENAAM)
data4$language <- detect_language(data4$OPLEIDINGSNAAM.ACTUEEL, plain_text = TRUE)
data4$language[is.na(data4$language) == TRUE] <- "en/nl"
data4$language[data4$language != 'en'] <- "en/nl"
########DUO HBO#########
data4hbo <- pivot_longer(data4hbo, cols = starts_with("X20"), values_to = "Registered", names_to = "Year", values_drop_na = TRUE)
data4hbo %>% mutate_if(is.factor, as.character) -> data4hbo
data4hbo <- mutate(data4hbo, Year = as.integer(gsub("X", "", Year)))
data4hbo$OPLEIDINGSNAAM.ACTUEEL <- as.character(data4hbo$OPLEIDINGSNAAM.ACTUEEL)
data4hbo$CROHO.ONDERDEEL <- as.character(data4hbo$CROHO.ONDERDEEL)
data4hbo$GEMEENTENAAM <- as.character(data4hbo$GEMEENTENAAM)
data4hbo$language <- detect_language(data4hbo$OPLEIDINGSNAAM.ACTUEEL, plain_text = TRUE)
data4hbo$language[is.na(data4hbo$language) == TRUE] <- "en/nl"
data4hbo$language[data4hbo$language != 'en'] <- "en/nl"
####DUO UNIVERSITY ADRESSES####
HOadr$Full_Address<- paste(HOadr$STRAATNAAM, HOadr$HUISNUMMER.TOEVOEGING, HOadr$PLAATSNAAM, sep =" ")
HOadr$StreetN <- paste(HOadr$STRAATNAAM, HOadr$HUISNUMMER.TOEVOEGING, sep = " ")
HOadr$GEMEENTENAAM <- as.character(HOadr$GEMEENTENAAM)
HO_locations <- HOadr %>%
geocode(street = StreetN, city = GEMEENTENAAM, country = 'Nederland', method = 'osm')
#####JOIN######
data4$HO.type <- 'WO'
data4hbo$HO.type <- 'HBO'
data4 <- rbind(data4, data4hbo)
#Rename column INSTELLINGSNAAM to join data
colnames(data4)[which(names(data4) == "INSTELLINGSNAAM.ACTUEEL")] <- "INSTELLINGSNAAM"
data4 <- merge(data4,HO_locations,by="INSTELLINGSNAAM")
labs <- lapply(seq(nrow(data4)), function(i) {
paste0( '<p>', data4[i, "INSTELLINGSNAAM"], '<p></p>',
data4[i, "Full_Address"], ', ',
data4[i, "GEMEENTENAAM.x"],'</p><p>',
data4[i, "INTERNETADRES"], '</a>' )
})
profiles <- data.frame(c("Cultuur en Maatschappij","Economie en Maatschappij ", "Natuur en Gezondheid", "Natuur en Techniek"), fix.empty.names = F)
# HELP + sources Information ---------------------------------------------------------------
help <- read_csv2("help.csv")
sources <- read.csv("Sources.csv")
#Version 2
server <- function(input, output, session) {
####### UI - GENERAL #########
#show intro modal
observeEvent("", {
showModal(modalDialog(
includeHTML("intro_text.html"),
easyClose = TRUE,
footer = tagList(
actionButton(inputId = "intro", label = "Close", icon = icon("window-close"))
)
))
})
observeEvent(input$intro,{
removeModal()
})
# use action buttons as tab selectors
update_all <- function(x) {
updateSelectInput(session, "tab",
choices = c("", "Study Programs", "Regional Stats", "Analytics", "Sources"),
label = "",
selected = x
)
}
observeEvent(input$studyprograms, {
update_all("Study Programs")
})
observeEvent(input$regionalstats, {
update_all("Regional Stats")
})
observeEvent(input$analytics, {
update_all("Analytics")
})
observeEvent(input$sources, {
update_all("Sources")
})
# DYNAMIC RENDER RULES ----------------------------------------------------
observeEvent("", {
shinyjs::show("Studyprograms_panel")
shinyjs::hide("RegionalStats_panel")
shinyjs::hide("Analytics_panel")
shinyjs::hide("Sources_panel")
}, once = TRUE)
observeEvent(input$studyprograms, {
shinyjs::show("Studyprograms_panel")
shinyjs::hide("RegionalStats_panel")
shinyjs::hide("Analytics_panel")
shinyjs::hide("Sources_panel")
})
observeEvent(input$regionalstats, {
shinyjs::show("RegionalStats_panel")
shinyjs::hide("Studyprograms_panel")
shinyjs::hide("Analytics_panel")
shinyjs::hide("Sources_panel")
})
observeEvent(input$analytics, {
shinyjs::show("Analytics_panel")
shinyjs::hide("Studyprograms_panel")
shinyjs::hide("RegionalStats_panel")
shinyjs::hide("Sources_panel")
})
observeEvent(input$sources, {
shinyjs::show("Sources_panel")
shinyjs::hide("Studyprograms_panel")
shinyjs::hide("RegionalStats_panel")
shinyjs::hide("Analytics_panel")
})
# show active button with color
observeEvent(input$tab, {
x <- input$tab
updateButton(session, "Study Programs", style = {
if (x == "Study Programs") {
paste("warning")
} else {
paste("primary")
}
})
updateButton(session, "Regional Stats", style = {
if (x == "Regional Stats") {
paste("warning")
} else {
paste("primary")
}
})
updateButton(session, "Analytics", style = {
if (x == "Analytics") {
paste("warning")
} else {
paste("primary")
}
})
updateButton(session, "Sources", style = {
if (x == "Sources") {
paste("warning")
} else {
paste("primary")
}
})
})
# STUDY PROGRAMS  ----------------------------------------------------------
output$studies_table = DT::renderDataTable({
data4 %>%
group_by(OPLEIDINGSNAAM.ACTUEEL, INSTELLINGSNAAM, HO.type, language, CROHO.ONDERDEEL, GEMEENTENAAM.x, TYPE.HOGER.ONDERWIJS, OPLEIDINGSVORM) %>%
summarise_at(vars(Registered), list(mean = mean, median = median)) %>%
filter(HO.type %in% input$wohboInput) %>%
filter(language %in% input$languageInput) %>%
filter(CROHO.ONDERDEEL %in% input$crohoInput) %>%
filter(GEMEENTENAAM.x %in% input$locationInput) %>%
filter(TYPE.HOGER.ONDERWIJS %in% input$levelInput) %>%
filter(OPLEIDINGSVORM %in% input$fullpartInput)  %>%
# filter(INSTELLINGSNAAM %in% input$instituteInput) %>%
datatable(options=list(lengthMenu = c(5, 30, 50), pageLength = 5, columnDefs = list(list(visible=FALSE, targets=9)), style = "font-size: 70%; width: 60%"))
})
# stream_react <- reactive({
#   #shiny::req(nrow(stream_react) != 0)
#   #shiny::req(input$instituteInput)
#
#   data4 %>%
#     group_by(INSTELLINGSNAAM) %>%
#     tapply(Registered, INSTELLINGSNAAM, FUN=sum)%>%
#     # filter(HO.type %in% input$wohboInput) %>%
#     # filter(language %in% input$languageInput) %>%
#     # filter(CROHO.ONDERDEEL %in% input$crohoInput) %>%
#     # filter(GEMEENTENAAM.x %in% input$locationInput) %>%
#     # filter(TYPE.HOGER.ONDERWIJS %in% input$levelInput) %>%
#     # filter(OPLEIDINGSVORM %in% input$fullpartInput)  %>%
#     # filter(INSTELLINGSNAAM %in% input$instituteInput)
#     #
#
#
#
# })
# output$ins_stream = renderPlotly({
#     plot_ly(data = stream_react(), x = ~Year, y = ~Registered, type = 'scatter',
#             mode = 'none', stackgroup = 'one', split = ~INSTELLINGSNAAM)
# })
output$ins_stream <- renderStreamgraph({
data %>%
group_by(name, year) %>%
streamgraph(key="name", value="value", date="year", height="300px", width="1000px",interpolate="linear") %>%
sg_legend(show=TRUE, label="Instelling ")
# data4 %>%
#   gather(INSTELLINGSNAAM, Registered, -Year) %>%
#   group_by(Year, INSTELLINGSNAAM, Registered) %>%
#   sum(Registered) %>%
#   streamgraph(key ="INSTELLINGSNAAM", value = "Registered", date = "Year")
})
output$bar_studies <- renderPlotly({
p <- data4 %>%
group_by(OPLEIDINGSNAAM.ACTUEEL, INSTELLINGSNAAM, Year, GESLACHT, HO.type, language, CROHO.ONDERDEEL, GEMEENTENAAM.x, TYPE.HOGER.ONDERWIJS) %>%
summarise_at(vars(Registered), funs(sum)) %>%
filter(Year == input$yearInput) %>%
filter(HO.type %in% input$wohboInput) %>%
filter(language %in% input$languageInput) %>%
filter(CROHO.ONDERDEEL %in% input$crohoInput) %>%
filter(GEMEENTENAAM.x %in% input$locationInput) %>%
filter(TYPE.HOGER.ONDERWIJS %in% input$levelInput) %>%
# filter(OPLEIDINGSVORM %in% input$fullpartInput)  %>%
#  filter(INSTELLINGSNAAM %in% input$instituteInput) %>%
ggplot() +
geom_col(aes(INSTELLINGSNAAM, Registered, fill = GESLACHT), position = "dodge") +
coord_flip()
ggplotly(p)
})
output$map1 <- renderLeaflet({
leaflet() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
setView(4.95, 52.2, zoom = 7)
})
map1_data_react <- reactive({
# shiny::validate(shiny::need(nrow(map1_data_react) > 0, "No data"))
data4 %>%
filter(HO.type %in% input$wohboInput) %>%
filter(language %in% input$languageInput) %>%
filter(CROHO.ONDERDEEL %in% input$crohoInput) %>%
filter(GEMEENTENAAM.x %in% input$locationInput) %>%
filter(TYPE.HOGER.ONDERWIJS %in% input$levelInput)
#  filter(OPLEIDINGSVORM %in% input$fullpartInput)  %>%
#  filter(INSTELLINGSNAAM %in% input$instituteInput)
})
## respond to the filtered data
observe({
leafletProxy(mapId = "map1", data = map1_data_react()) %>%
clearMarkers() %>%   ## clear previous markers
addMarkers(label = ~as.character(INSTELLINGSNAAM), popup = ~as.character(INTERNETADRES))
})
# react_matrix = reactive({
#   data4 %>%
#     select(OPLEIDINGSNAAM.ACTUEEL) %>%
#     filter(HO.type %in% input$wohboInput) %>%
#     filter(language %in% input$languageInput) %>%
#     filter(CROHO.ONDERDEEL %in% input$crohoInput) %>%
#     filter(GEMEENTENAAM.x %in% input$locationInput) %>%
#     filter(TYPE.HOGER.ONDERWIJS %in% input$levelInput) %>%
#     filter(OPLEIDINGSVORM %in% input$fullpartInput)  %>%
#     filter(INSTELLINGSNAAM %in% input$instituteInput)
#   })
# output$matrix <- renderDataTable({
#   DT::datatable({})
#  #
#
# })
## lapply(labs, htmltools::HTML)
# SOURCES -------------------------------------------------------------
output$source_table <- renderTable(sources, escape=FALSE)
# BOX REGIONAL STATS - map 1 -------------------------------------------------------------------
output$mapwoz <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = WBwaarde, weight = 1, smoothFactor = 0.5, opacity = 0.6, fillOpacity = 0.6,
fillColor = ~colorbins1(WBwaarde$WOZ),
highlightOptions = highlightOptions(weight = 2, color = "red", fillOpacity = 0.3), label = tooltip1, group = 'WOZ')
})
#  output$mapwoz <- renderImage({'WOZ.png'})
output$mappop <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = WBpop, weight = 1, smoothFactor = 0.5, opacity = 0.6, fillOpacity = 0.6,
fillColor = ~colorbins2(WBpop$population),
highlightOptions = highlightOptions(weight = 2, color = "red", fillOpacity = 0.3), label = tooltip2, group = 'Population')
})
output$maprental <- renderLeaflet({
leaflet() %>%
addTiles() %>%
addProviderTiles("Esri.WorldGrayCanvas") %>%
addPolygons(data = WBrent, weight = 1, smoothFactor = 0.5, opacity = 0.6, fillOpacity = 0.6,
fillColor = ~colorbins3(WBrent$value),
highlightOptions = highlightOptions(weight = 2, color = "red", fillOpacity = 0.3), label = tooltip3, group = 'Rental properties (%)')
})
# BOX REGIONAL STATS - map 2 --------------------------------------------------------------
# BOX REGIONAL STATS - map 3 --------------------------------------------------------------
# BOX REGIONAL STATS - map 4 --------------------------------------------------------------
# BOX ANALYTICS - 1  ------------------------------------------------------------------
# DOWNLOAD ----------------------------------------------------------------
output$downloadData <- downloadHandler(
filename = function() {
paste(input$filename, "_data4_", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write_csv(data4, file)
}
)
download_box <- function(exportname, plot) {
downloadHandler(
filename = function() {
paste(exportname, Sys.Date(), ".png", sep = "")
},
content = function(file) {
ggsave(file, plot = plot, device = "png", width = 8)
}
)
}
output$down_studiestable <- download_box("studies_table", x)
output$down_studiesbar <- download_box("studies_bar", x)
output$down_studiesstream <- download_box("studies_stream", x)
output$down_map1 <- download_box("map1", x)
output$down_map2 <- download_box("map2", x)
output$down_map3 <- download_box("map3", x)
output$down_map4 <- download_box("map4", x)
}
# ####### OLD SERVER
#
#
# #plot
# server <- shinyServer(function(input, output, session) {
#   output$map <- renderLeaflet({
#     leaflet() %>%
#       addTiles() %>%
#       addProviderTiles("Esri.WorldGrayCanvas") %>%
#       enableMeasurePath() %>%
#       addPolygons(data = WBwaarde, weight = 1, smoothFactor = 0.5, opacity = 0.6, fillOpacity = 0.6,
#                   fillColor = ~colorbins1(WBwaarde$WOZ),
#                   highlightOptions = highlightOptions(weight = 2, color = "red", fillOpacity = 0.3), label = tooltip1, group = 'WOZ') %>%
#
#       addPolygons(data = WBpop, weight = 1, smoothFactor = 0.5, opacity = 0.6, fillOpacity = 0.6,
#                   fillColor = ~colorbins2(WBpop$population),
#                   highlightOptions = highlightOptions(weight = 2, color = "red", fillOpacity = 0.3), label = tooltip2, group = 'Population') %>%
#
#       addPolygons(data = WBrent, weight = 1, smoothFactor = 0.5, opacity = 0.6, fillOpacity = 0.6,
#                   fillColor = ~colorbins3(WBrent$value),
#                   highlightOptions = highlightOptions(weight = 2, color = "red", fillOpacity = 0.3), label = tooltip3, group = 'Rental properties (%)') %>%
#
#       addMarkers(labelOptions = labelOptions(noHide = F), lng = HO_locations$long, lat = HO_locations$lat,
#                  clusterOptions = markerClusterOptions(maxClusterRadius = 9), label = HO_locations$INSTELLINGSNAAM, group="Official University address") %>%
#
#       addLayersControl(overlayGroups = c("WOZ", "Population", "Rental properties (%)"),
#                        options = layersControlOptions(collapsed = FALSE)) %>%
#       hideGroup(c("Population", "Rental properties (%)")) %>%
#       AddSearchButton(group = 'Official University address',position = "topleft", zoom = 15)
#
#
#   })
#
#
#   output$table = DT::renderDataTable({
#     data4 %>%
#       group_by(OPLEIDINGSNAAM.ACTUEEL, INSTELLINGSNAAM.ACTUEEL, HO.type, language, CROHO.ONDERDEEL, GEMEENTENAAM, TYPE.HOGER.ONDERWIJS) %>%
#       summarise_at(vars(Registered), funs(median)) %>%
#       filter(HO.type %in% input$bar3) %>%
#       filter(language %in% input$bar4) %>%
#       filter(CROHO.ONDERDEEL %in% input$bar2) %>%
#       filter(GEMEENTENAAM %in% input$bar5) %>%
#       filter(TYPE.HOGER.ONDERWIJS %in% input$bar6)
#   })
#   output$bar <- renderPlotly({
#     p <- data4 %>%
#       group_by(INSTELLINGSNAAM.ACTUEEL, Year, GESLACHT, HO.type, language, CROHO.ONDERDEEL, GEMEENTENAAM, TYPE.HOGER.ONDERWIJS) %>%
#       summarise_at(vars(Registered), funs(sum)) %>%
#       filter(Year == input$bar1) %>%
#       filter(HO.type %in% input$bar3) %>%
#       filter(language %in% input$bar4) %>%
#       filter(CROHO.ONDERDEEL %in% input$bar2) %>%
#       filter(GEMEENTENAAM %in% input$bar5) %>%
#       filter(TYPE.HOGER.ONDERWIJS %in% input$bar6) %>%
#       ggplot() +
#       geom_col(aes(INSTELLINGSNAAM.ACTUEEL, Registered, fill = GESLACHT), position = "dodge")
#     ggplotly(p)
#
#
#   })
#
#
# })
#
#
#
#
#Version 2.1
ui <- dashboardPage(
skin = "black",
title = "Check-the-Facts: Higher Education",
dashboardHeader(
title = span(img(src = "check the facts logo.svg", height = 35), "Check-The-Facts: Higher Education"),
titleWidth = 600,
dropdownMenu(
type = "notifications",
headerText = strong("HELP"),
icon = icon("question"),
badgeStatus = NULL,
notificationItem(
text = (help$text[1])),
notificationItem(
text = (help$text[2]))
),
tags$li(
a(
strong("More about Check The Facts"),
height = 40,
href = "https://github.com/jasminkareem/CheckTheFacts",
title = "",
target = "_blank"
),
class = "dropdown"
)),
dashboardSidebar(
width = 350,
div(class = "inlay", style = "height:15px;width:100%;background-color: #ecf0f5;"),
menuItem(
"Download Data",
tabName = "download",
icon = icon("download"),
textInput(
inputId = "filename",
placeholder = "Name download file",
label = ""
),
div(
downloadButton(
outputId = "downloadData",
label = "Save data",
icon = icon("download"),
style = "color: black; margin-left: 15px; margin-bottom: 5px;"
)
)
),
br(),
sliderInput(
inputId = "yearInput",
label = "Select year",
min = min(data4$Year),
max =  max(data4$Year),
value = max(data4$Year),
step = 1,
sep = ""
),
selectizeInput("crohoInput", label = h5("Select area of study"),
choices = sort(unique(data4$CROHO.ONDERDEEL)), selected = sort(unique(data4$CROHO.ONDERDEEL)), multiple = TRUE,
options = list(plugins= list('remove_button'))),
selectizeInput("wohboInput", label = h5("Select WO/HBO"),
br(),
choices = sort(unique(data4$HO.type)), selected = sort(unique(data4$HO.type)), multiple = TRUE,
options = list(plugins= list('remove_button'))),
selectizeInput("languageInput", label = h5("Select language of study"),
choices = sort(unique(data4$language)), selected = sort(unique(data4$language)), multiple = TRUE,
options = list(plugins= list('remove_button'))),
pickerInput("locationInput", h5("Select Location"), choices=sort(unique(data4$GEMEENTENAAM.x)), multiple = TRUE,
selected = sort(unique(data4$GEMEENTENAAM.x)),
options = list(`actions-box` = TRUE, size = 8, `live-search`= TRUE)),
selectizeInput("levelInput", label = h5("Select level of study"),
choices = sort(unique(data4$TYPE.HOGER.ONDERWIJS)), selected = sort(unique(data4$TYPE.HOGER.ONDERWIJS)), multiple = TRUE,
options = list(plugins= list('remove_button'))),
selectizeInput("fullpartInput", label = h5("Select Full/Part-time"),
choices = sort(unique(data4$OPLEIDINGSVORM)), selected = sort(unique(data4$OPLEIDINGSVORM)), multiple = TRUE,
options = list(plugins= list('remove_button'))),
pickerInput("instituteInput", h5("Select Institute"), choices=sort(unique(data4$INSTELLINGSNAAM)), multiple = TRUE,
selected = "Tilburg University",
options = list(`actions-box` = TRUE, size = 8, `live-search`= TRUE)),
br() ),
dashboardBody(
tags$head(
tags$link(
rel = "stylesheet",
type = "text/css",
href = "CTF_style.css")
),
useShinyjs(),
# MAIN BODY ---------------------------------------------------------------
fluidRow(
column(
width = 12,
bsButton("studyprograms",
label = "Study Programs",
icon = icon("user-graduate"),
style = "primary"),
bsButton("regionalstats",
label = "Regional Stats",
icon = icon("globe-europe"),
style = "primary"),
bsButton("analytics",
label = "Analytics",
icon = icon("chart-line"),
style = "primary"),
bsButton("sources",
label = "Sources",
icon = icon("table"),
style = "primary")
)
),
br(),
fluidRow(id = "RegionalStats_panel", br(),
tabBox(title = "Housing", id = "tabsethouse", width = 6,
tabPanel("WOZ", leafletOutput("mapwoz")%>%shinycssloaders::withSpinner(type = 4,color = "#6db2f2", size = 0.7 )),
tabPanel("*Student* population", leafletOutput("mappop")%>%shinycssloaders::withSpinner(type = 4,color = "#6db2f2", size = 0.7 )),
tabPanel("*Student* Residential Rental Property (%)", leafletOutput("maprental")%>%shinycssloaders::withSpinner(type = 4,color = "#6db2f2", size = 0.7 ))),
tabBox(title = "...", id = "tabsetxyz", width = 6)),
fluidRow(id = "Analytics_panel", br(),
tabBox(title = "What was the effect of the loan system that was introduced in 2015 on students?", id = "tabsetLoan2015", width = 6,
tabPanel("Plot 1", img(src = "2015inschrijv", height = 100)%>%shinycssloaders::withSpinner(type = 4,color = "#6db2f2", size = 0.7 ), br(),
"From this plot we see that student write-ins have actually increased since 2015. However, this does not necessarily mean that this is a result of the change in loan system!
This could also be because of an overall trend in education in the Netherlands. Check the next tab to see a continuation of this investigation."),
tabPanel("..."))),
fluidRow(id = "Sources_panel", br(),
box(title = "Sources", "This table shows the original sources used. These are all openly available (open data).",
br(), width = 12, tableOutput("source_table")
)),
fluidRow(id = "Studyprograms_panel",
tabBox(title = "Inschrijvingen", id = "tabsetinsch", width = 6, height = 525,
tabPanel("Trend", streamgraphOutput("ins_stream")%>%shinycssloaders::withSpinner(type = 4,color = "#6db2f2", size = 0.7 )),
tabPanel("per group", plotlyOutput("bar_studies")%>%shinycssloaders::withSpinner(type = 4,color = "#6db2f2", size = 0.7 )),
selectInput("streamin",
label = "Choose a variable to display",
choices = c("INSTELLINGSNAAM", "OPLEIDINGSNAAM.ACTUEEL", "GESLACHT", "GEMEENTENAAM.x"),
selected = "INSTELLINGSNAAM")
),
tabBox(title = "Map", id = "tabsetmap", width = 6, height = 550,
tabPanel("HO locations"), leafletOutput("map1", height = 450)%>%shinycssloaders::withSpinner(type = 4,color = "#6db2f2", size = 0.7 )),
br(),
tabBox(title = "Studies",id = "tabsetstud", width = 12,
tabPanel("Study Program Table", DT::dataTableOutput("studies_table")%>%shinycssloaders::withSpinner(type = 4,color = "#6db2f2", size = 0.7 )),
tabPanel("Matrix", "doorstroommatrix", DT::dataTableOutput("matrix")%>%shinycssloaders::withSpinner(type = 4,color = "#6db2f2", size = 0.7 ))), br()
)))
runApp()
